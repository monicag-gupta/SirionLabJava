package gof.creational;
class Singleton
{
	private String msg;
	public String getMsg() {
		return msg;
	}
	public void setMsg(String msg) {
		this.msg = msg;
	}
	private static Singleton singleObj;
	public static Singleton createSingletonObj() {
		if(singleObj == null)
			singleObj = new Singleton();
		return singleObj;
	}
	private Singleton() {}
}

public class SingletonEg {

	public static void main(String[] args) {
		Singleton obj1= Singleton.createSingletonObj();
		obj1.setMsg("Hello This is Obj1");
		System.out.println("Obj1: " + obj1.getMsg());
		Singleton obj2= Singleton.createSingletonObj();
		obj1.setMsg("Hello This is Obj2");
		System.out.println("Obj2: " + obj2.getMsg());
		System.out.println("Obj1: " + obj1.getMsg());
		System.out.println("Obj1 and Obj2 are the same? " + (obj1==obj2));
	}

}


/*1. Create a single object of the class (static private same class object)
2. Create a method accessible by the class name (public static method), the method is responsible for creating the single object, or returning the already created object.
3. Remove the rights for the class to create a new object (make the constructor(s) private)
*/






package gof.creational;

interface Color { // public interface
	String getColorName();
}

class Red implements Color {
	private String name;

	Red() {
		name = "Red";
	}

	public String getColorName() {
		return name;
	}
}

class Green implements Color {
	private String name;

	Green() {
		name = "Green";
	}

	public String getColorName() {
		return name;
	}
}

class Blue implements Color {
	private String name;

	Blue() {
		name = "Blue";
	}

	public String getColorName() {
		return name;
	}
}

class ColorFactory { // public class to create specific color object
	private String color;

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public Color getColorObj() {
		Color c = new Red();
		if (color.equals("Green")) {
			c = new Green();
		} else if (color.equals("Blue")) {
			c = new Blue();
		}
		return c;
	}
}

public class FactoryEg {

	public static void main(String[] args) {
		String s;
		ColorFactory cf = new ColorFactory();
		try (java.util.Scanner sc = new java.util.Scanner(System.in)) {
			System.out.println("Which color do you choose: ");
			s = sc.nextLine();

			cf.setColor(s);
			Color c = cf.getColorObj();
			System.out.println("The Color Object based on selection is: " + c.getColorName());

		}

	}

}




















package gof.creational;

interface Shape { // public interface
	String getShapeName();
}

class Triangle implements Shape {
	private String name;

	Triangle() {
		name = "Triangle";
	}

	public String getShapeName() {
		return name;
	}
}

class Square implements Shape {
	private String name;

	Square() {
		name = "Square";
	}

	public String getShapeName() {
		return name;
	}
}
class Circle implements Shape {
	private String name;

	Circle() {
		name = "Circle";
	}

	public String getShapeName() {
		return name;
	}
}

class ShapeFactory { // public class to create specific shape object
	private String shape;

	public String getShape() {
		return shape;
	}

	public void setShape(String shape) {
		this.shape = shape;
	}

	public Shape getShapeObj() {
		Shape s = new Triangle();
		if (shape.equals("Square")) {
			s = new Square();
		} else if (shape.equals("Circle")) {
			s = new Circle();
		}
		return s;
	}
}

class AbstractFactoryPaint{ //public class
	private ColorFactory cf=new ColorFactory();
	private ShapeFactory sf= new ShapeFactory();
	private Shape s;
	private Color c;
	private String color;
	private String shape;
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color;
	}
	public String getShape() {
		return shape;
	}
	public void setShape(String shape) {
		this.shape = shape;
	}
	public void draw() {
		cf.setColor(color);
		c = cf.getColorObj();
		sf.setShape(shape);
		s= sf.getShapeObj();
		System.out.println(s.getShapeName() + " is drawn in " + c.getColorName() + " color!!");
		
	}
	
}
public class AbstractFactoryEg {

	public static void main(String[] args) {
		AbstractFactoryPaint paint=new AbstractFactoryPaint();
		paint.setColor("Green");
		paint.setShape("Triangle");
		paint.draw();
	}

}










package gof.creational;
class Roof{
	String r;
	Roof(String r){
		this.r=r;
	}
	@Override
	public String toString() {
		return "\nRoof with material " + r + "!";
	}
}
class Walls{
	String r;
	Walls(String r){
		this.r=r;
	}
	@Override
	public String toString() {
		return "\nWalls with material " + r + "!";
	}
}
class JoiningMaterial{
	String r;
	JoiningMaterial(String r){
		this.r=r;
	}
	@Override
	public String toString() {
		return "\nJoiningMaterial used is " + r + "!";
	}
}

interface House{
	void HouseAsString();
}
abstract class FarmHouse implements House{
	protected Roof r;
	protected Walls w;
	protected JoiningMaterial j;
	public FarmHouse(String rf, String wa, String jm) {
		r=new Roof(rf);
		w=new Walls(wa);
		j=new JoiningMaterial(jm);
	}
	public void HouseAsString() {
		System.out.println(r + "" + w + "" + j);
	}
}
class TipiHouse extends FarmHouse{
	TipiHouse(){
		super("Wooden","Bamboo","iron nails");		
	}	
}
class ConcreteHouse extends FarmHouse{
	ConcreteHouse(){
		super("CementBlocks","Bricks","Cement");		
	}	
}
class IglooHouse extends FarmHouse{
	IglooHouse(){
		super("IceBlocks","Ice","Salt");		
	}	
}

class Builder{
	public FarmHouse getHouse(String housetype) {
		FarmHouse f = new ConcreteHouse();
		if(housetype.equals("Wooden"))
			f=new TipiHouse();
		else if(housetype.equals("Ice"))
			f=new IglooHouse();
		
		return f;
		
	}
	
}

public class BuilderEg {

	public static void main(String[] args) {
		Builder B = new Builder();
		FarmHouse f=B.getHouse("Ice");
		f.HouseAsString();

	}

}












package gof.creational;
class Original{
	private String msg;
	Original(){}
	Original(String m){msg=m;}
	public String getMsg() {
		StringBuilder msg2=new StringBuilder();
		for(int i=0;i<msg.length();i++) {
			msg2.append(msg.charAt(i)).append("a");
		}
		return msg2.toString();
	}
	
	public void appendMsg(String m) {
		String s=msg + m;
		msg = s;
	}

	public void setMsg(String msg) {
		this.msg = msg;
	}

	@Override
	public String toString() {
		return "Original [msg=" + msg + "]";
	}
	public Original myClone() {
		Original o=new Original();
		o.setMsg(this.msg);
		return o;
	}
	
}

class Prototype{
	Original o;
	String s;
	Prototype(){
		o=new Original();
		System.out.println("This is not original!!");
	}
	Prototype(Original o){
		this.o=o.myClone();
		System.out.println("This is not original!!");
	}
	public void setMsg(String msg) {
		o.setMsg(msg);
		s=o.getMsg();
	}
	@Override
	public String toString() {
		return "Prototype [s=" + s + "]";
	}

	
}

public class PrototypeEg {
	static Original getOriginalObj() {
		return new Original("Hey");
	}

	public static void main(String[] args) {
		Prototype p = new Prototype();
		p.setMsg("Hello");
		System.out.println(p);
		
		Original o=getOriginalObj();
		
		Prototype p2 = new Prototype(o);
		p2.setMsg("New Msg");
		System.out.println(p2);

	}

}





























package gof.structural;
import java.util.*;
class Prj123{
	String pname;

	public String getPname() {
		return pname;
	}

	public void setPname(String pname) {
		this.pname = pname;
	}
	
}
class Emp123{
	String ename;

	public Emp123(String ename) {
		super();
		this.ename = ename;
	}
	public Emp123() {}
	public String getEname() {
		return ename;
	}

	public void setEname(String ename) {
		this.ename = ename;
	}

	@Override
	public String toString() {
		return "[ename=" + ename + "]";
	}
	
}
class PrjMngr123{
	Prj123 p;
	List<Emp123> team;
	PrjMngr123(){
		p=new Prj123();
		team = new ArrayList<>();
	}
	void allocate (Prj123 p) {
		this.p=p;
	}
	void add(Emp123... es) {
		for(Emp123 e:es) team.add(e);
	}
	@Override
	public String toString() {
		return "PrjMngr123 [p=" + p.getPname() + ", team=" + team + "]";
	}
	
}
public class AdapterEg {

	public static void main(String[] args) {
	
		PrjMngr123 adapter= new PrjMngr123();
		Prj123 sales=new Prj123();
		sales.setPname("ATM");
		adapter.allocate(sales);
		adapter.add(new Emp123("John"),new Emp123("Jane"));
		System.out.println(adapter);
	}

}














package gof.structural;
interface Ludo{}
class Ludov1 implements Ludo{
	public String toString() {
		return "Ludov1 is being played []";
	}	
}
class Ludov2 implements Ludo{
	public String toString() {
		return "Ludov2 is being played []";
	}	
}
class Mob{
	Ludo l;
	public void install(Ludo l) {
		this.l=l;
	}
	public void play() {
		System.out.println(l);
	}
	public void update(Ludo l) {
		this.l=l;
	}
}

public class BridgeEg {

	public static void main(String[] args) {
		Mob m=new Mob();
		m.install(new Ludov1());
		m.play();
		m.update(new Ludov2());
		m.play();

	}

}














package gof.structural;
import java.util.*;
class Furniture{
	public String toString() {
		return "Grade A Furniture []";
	}	
}
class Emp1234{
	public String toString() {
		return "Tier 1 College : Selected Employees []";
	}	
}
class Staff{
	public String toString() {
		return "Extra Staff []";
	}	
}
class Comp1234{
	List<Furniture> furnitures = new ArrayList<>();
	List<Emp1234> emps = new ArrayList<>();
	List<Staff> staffs = new ArrayList<>();
	Comp1234(){
		furnitures.add(new Furniture());
		emps.add(new Emp1234());
		staffs.add(new Staff());
	}
	@Override
	public String toString() {
		return "Comp1234 [furnitures=" + furnitures + ", emps=" + emps + ", staffs=" + staffs + "]";
	}
	
}
public class CompositeEg {

	public static void main(String[] args) {
		System.out.println(new Comp1234());

	}

}











package gof.structural;
interface GTA{}
class ReadMob{
	public void read(String s) {
		System.out.println(s);
	}
}
class GTAv1 implements GTA {
	Mobile123 m;
	GTAv1(Mobile123 m){
		this.m=m;
	}
	public String toString() {
		return "GTAv1 []";
	}
}
class GTAv2 implements GTA {
	Mobile123 m;
	GTAv2(Mobile123 m){
		this.m=m;
	}
	public String toString() {
		ReadMob mm=new ReadMob();
		mm.read(m.bankDetails);
		return "GTAv2 []";
	}
}
class Mobile123{
	public String bankDetails;
	public Mobile123(String bankDetails){this.bankDetails=bankDetails;}
	GTA g;
	public void install(GTA g) {
		this.g=g;
	}
	public void play() {
		System.out.println(g);
	}
}
public class DecoratorEg {

	public static void main(String[] args) {
		Mobile123 mob=new Mobile123("1234SPasscode");
//		mob.install(new GTAv1(mob));
//		mob.play();
		
		mob.install(new GTAv2(mob));
		mob.play();

	}

}









package gof.structural;
import java.util.*;
import java.util.stream.Collectors;
interface L{
	void add(String s);
	void remove();
}
class LL implements L{
	LinkedList<String> nodes=new LinkedList<>();
	public void add(String s) {
		nodes.add(s);	
	}
	public void remove() {
		nodes.removeLast();		
	}
	@Override
	public String toString() {
		return "LL [nodes=" + nodes + "]";
	}
}
class Ary implements L{
	String[] nodes=new String[5000];
	int tos=0;
	public void add(String s) {
		if(tos<5000) nodes[tos]=s;
		tos++;		
	}
	public void remove() {
		tos--;		
	}
	@Override
	public String toString() {
		String aryy="[";
		for(int i=0;i<tos;i++) {
			String ss=nodes[i];
			aryy += ss + ", ";
		}
		aryy += "]";
		
		return "Ary [nodes=" + Arrays.stream(nodes).filter((x)->x!=null).collect(Collectors.joining(",")) + "]";
	}
}

public class FacadeEg {

	public static void main(String[] args) {
		L obj1=new Ary();
		obj1.add("H1");
		obj1.add("H2");
		obj1.add("H3");
		System.out.println(obj1);

	}

}











package gof.structural;
interface StringSupplier{
	 String getS();
	 void setS(String s);
}
interface IntegerSupplier{
	 Integer getI();
	 void setI(Integer i);
}

class IntStringSupplier implements StringSupplier,IntegerSupplier{
	private String s;
	private Integer i;
	public String getS() {
		return s;
	}
	public void setS(String s) {
		this.s = s;
	}
	public Integer getI() {
		return i;
	}
	public void setI(Integer i) {
		this.i = i;
	}
	
	
}

public class FlyWeightEg {

	public static void main(String[] args) {
		StringSupplier s=new IntStringSupplier();
		s.setS("Hello");
		System.out.println(s.getS());
	}

}















package gof.structural;
class Search{
	String s;
	void text(String s) {this.s=s;}
	void result() {
		s=" Original String " + s + " Researched String " + s;
		System.out.println(s);
	}
}
class ProxySearch{
	Search search;
	ProxySearch(){search=new Search();}
	void text(String s) {
		search.text(s);
	}
	void result() {
		search.result();
	}
}

public class ProxyEg {

	public static void main(String[] args) {
		ProxySearch p=new ProxySearch();
		p.text("Sites");
		p.result();
		

	}

}

































































package gof.behavioural;
class Step1{
	public int len(String s) {
		return s.length();
	}
}
class Step2{
	public Integer wrap(int i) {
		return i;
	}
}
class Step3{
	public String toStr(Integer i) {
		return i.toString();
	}
}
class Chain{
	void printlen(String s) {
		Step1 s1=new Step1();
		Step2 s2=new Step2();
		Step3 s3=new Step3();
//		int x = s1.len(s);
//		Integer i=s2.wrap(x);
//		String ss=s3.toStr(i);
		String ss=s3.toStr(s2.wrap(s1.len(s)));
		System.out.println(ss);
	}
}
public class ChainOfResponsibility {

	public static void main(String[] args) {
		Chain c=new Chain();
		c.printlen("Hello");

	}

}

















package gof.behavioural;

import java.util.function.Consumer;

public class CommandEg {

	public static void main(String[] args) {
		Consumer<String> printCommand=System.out::println;
		printCommand.accept("Hello");

	}

}











package gof.behavioural;
class Interpretor{
	public String toHindi(String s) {
		if(s.equals("Hello"))
			return "Namaskar";
		else 
			return "Pata Nahi Kya convert kare";
	}
}
public class InterpretorEg {

	public static void main(String[] args) {
		Interpretor i=new Interpretor();
		System.out.println(i.toHindi("Hello"));

	}

}



















package gof.behavioural;

import java.util.Arrays;
import java.util.List;

public class IteratorEg {

	public static void main(String[] args) {
		List<String> strs=Arrays.asList("John","Jane","Smith");
		strs.stream().forEach(System.out::println);

	}

}










package gof.behavioural;
class Person123{
	String name;
	Person123(String n){name=n;}
	@Override
	public String toString() {
		return "Person123 [name=" + name + "]";
	}
}

class Phone123{
	public void call(Person123 p1,Person123 p2) {
		System.out.println(p1 + " is talking to " + p2);
	}
}

public class MediatorEg {

	public static void main(String[] args) {
		Person123 p1=new Person123("John");
		Person123 p2=new Person123("Jane");
		Phone123 ph=new Phone123();
		ph.call(p1, p2);

	}

}








package gof.behavioural;
class Light{
	boolean swith;
	Light(){swith=false;}
	public void stateOn(){
		swith = true;
	}
	public void stateOff(){
		swith = false;
	}
	public boolean memento(){
		return swith;
	}
}

public class StateMementoEg {

	public static void main(String[] args) {
		Light[] l1= {new Light(),new Light(),new Light()};
		l1[0].stateOn();
		l1[1].stateOff();
		l1[2].stateOn();
		System.out.println("Guard checks the memnto of Lights..");
		int i=0;
		int c=0;
		for(;i<3;i++) {
			if(l1[i].memento()) c++;
		}
		System.out.println("No of lights kept on: " + c);
		

	}

}










package gof.behavioural;

class Player{
	public String name;
	public int money=0;
}
class Visitor{
	public void visit(Player p, int tkt) {
		p.money += tkt;
	}
}
class Observer{
	public void infoPlayer(Player p) {
		System.out.println(p.name + " has made " + p.money + " after this game!");
	}
}

public class ObserverVisitorEg {

	public static void main(String[] args) {
		Player p=new Player();
		p.name="John Doe";
		p.money = 100;
		new Visitor().visit(p, 1000);
		new Observer().infoPlayer(p);

	}

}





















































package gof.behavioural;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class StrategyEg {

	public static void main(String[] args) {
		List<Integer> ints = Arrays.asList(45,2,87,78,3);
		Collections.sort(ints);
		System.out.println(ints);

	}

}


























