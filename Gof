package gof.creational;
class Singleton
{
	private String msg;
	public String getMsg() {
		return msg;
	}
	public void setMsg(String msg) {
		this.msg = msg;
	}
	private static Singleton singleObj;
	public static Singleton createSingletonObj() {
		if(singleObj == null)
			singleObj = new Singleton();
		return singleObj;
	}
	private Singleton() {}
}

public class SingletonEg {

	public static void main(String[] args) {
		Singleton obj1= Singleton.createSingletonObj();
		obj1.setMsg("Hello This is Obj1");
		System.out.println("Obj1: " + obj1.getMsg());
		Singleton obj2= Singleton.createSingletonObj();
		obj1.setMsg("Hello This is Obj2");
		System.out.println("Obj2: " + obj2.getMsg());
		System.out.println("Obj1: " + obj1.getMsg());
		System.out.println("Obj1 and Obj2 are the same? " + (obj1==obj2));
	}

}


/*1. Create a single object of the class (static private same class object)
2. Create a method accessible by the class name (public static method), the method is responsible for creating the single object, or returning the already created object.
3. Remove the rights for the class to create a new object (make the constructor(s) private)
*/






package gof.creational;

interface Color { // public interface
	String getColorName();
}

class Red implements Color {
	private String name;

	Red() {
		name = "Red";
	}

	public String getColorName() {
		return name;
	}
}

class Green implements Color {
	private String name;

	Green() {
		name = "Green";
	}

	public String getColorName() {
		return name;
	}
}

class Blue implements Color {
	private String name;

	Blue() {
		name = "Blue";
	}

	public String getColorName() {
		return name;
	}
}

class ColorFactory { // public class to create specific color object
	private String color;

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public Color getColorObj() {
		Color c = new Red();
		if (color.equals("Green")) {
			c = new Green();
		} else if (color.equals("Blue")) {
			c = new Blue();
		}
		return c;
	}
}

public class FactoryEg {

	public static void main(String[] args) {
		String s;
		ColorFactory cf = new ColorFactory();
		try (java.util.Scanner sc = new java.util.Scanner(System.in)) {
			System.out.println("Which color do you choose: ");
			s = sc.nextLine();

			cf.setColor(s);
			Color c = cf.getColorObj();
			System.out.println("The Color Object based on selection is: " + c.getColorName());

		}

	}

}




















interface Shape { // public interface
	String getShapeName();
}

class Triangle implements Shape {
	private String name;

	Triangle() {
		name = "Triangle";
	}

	public String getShapeName() {
		return name;
	}
}

class Square implements Shape {
	private String name;

	Square() {
		name = "Square";
	}

	public String getShapeName() {
		return name;
	}
}
class Circle implements Shape {
	private String name;

	Circle() {
		name = "Circle";
	}

	public String getShapeName() {
		return name;
	}
}

class ShapeFactory { // public class to create specific shape object
	private String shape;

	public String getShape() {
		return shape;
	}

	public void setShape(String shape) {
		this.shape = shape;
	}

	public Shape getShapeObj() {
		Shape s = new Triangle();
		if (shape.equals("Square")) {
			s = new Square();
		} else if (shape.equals("Circle")) {
			s = new Circle();
		}
		return s;
	}
}














