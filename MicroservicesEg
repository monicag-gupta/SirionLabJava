Create a spring starter project: eureka-server
Add Eureka server as dependency

Edit application.properties
Main class: EurekaServerApplication




spring.application.name=eureka-server
server.port=8761
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.instance.hostname=localhost




server.port=8761 : This line sets the port number on which the application will run. In this case, the application will be running on port 8761. This is typically the default port for Eureka Server.
eureka.client.register-with-eureka=false : This line indicates that the current application will not register itself with a Eureka server. This setting is often used when configuring a standalone Eureka server, meaning this instance is responsible for service registry but does not act as a client that registers itself as a service.
eureka.client.fetch-registry=false : This line specifies that the current application will not fetch the registry information from the Eureka server. Similar to the previous setting, this is often used for a standalone Eureka server configuration. It means that this instance will not query other Eureka servers for registry information, as it is the primary registry itself.






package com.eureka_server;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(EurekaServerApplication.class, args);
	}

}





Maven clean
Maven install
Run the project as Java Application

Open browser: 
http://localhost:8761

No service is registered for now.









Project: microservice-two
Dependencies: 
Eureka Discovery Client, 
Spring Web 

Edit Main App: MicroserviceTwoApplication
In controller package: Add Class: HelloController 
Edit : application.properties





package com.microserviceTwo.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {

    @GetMapping("/hello")
    public String hello() {
        return "Hello from Microservice Two";
    }

}








package com.microserviceTwo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

@SpringBootApplication
@EnableDiscoveryClient
public class MicroserviceTwoApplication {

	public static void main(String[] args) {
		SpringApplication.run(MicroserviceTwoApplication.class, args);
	}

}






spring.application.name=microservice-two
server.port=8082
eureka.client.service-url.defaultZone=http://localhost:8761/eureka












Project: microservice-one
Dependencies: 
Eureka Discovery Client, 
Spring Web 
OpenFeign

Edit Main App: MicroserviceOneApplication
In client package: Add Interface : MicroserviceTwoClient
In controller package: Add Class: HelloController 
Edit : application.properties






package com.microserviceOne;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients

public class MicroserviceOneApplication {

	public static void main(String[] args) {
		SpringApplication.run(MicroserviceOneApplication.class, args);
	}

}






package com.microserviceOne.client;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;

@FeignClient(name = "microservice-two")
public interface MicroserviceTwoClient {
	@GetMapping("/hello")
	String getHello();
}






package com.microserviceOne.controller;

import com.microserviceOne.client.MicroserviceTwoClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {

    @Autowired
    private MicroserviceTwoClient microserviceTwoClient;

    @GetMapping("/hello")
    public String hello() {
        return "Hello from Microservice One";
    }

    @GetMapping("/call-microservice-two")
    public String callMicroserviceTwo() {
        return microserviceTwoClient.getHello();
    }
}






spring.application.name=microservice-one
server.port=8081
eureka.client.service-url.defaultZone=http://localhost:8761/eureka







Create a new Spring Boot project for the third microservice:
Project name: microservice-three
Dependencies: Eureka Discovery, Web, JPA, H2





Create Employee  under model package
create EmployeeRepository under repository package
create EmployeeService under service package
create EmployeeController under controller package







package com.microserviceThree.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Employee {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String name;
	private String position;

	// Getters and setters
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPosition() {
		return position;
	}

	public void setPosition(String position) {
		this.position = position;
	}
}








package com.microserviceThree.repository;

import com.microserviceThree.model.Employee;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
}

















package com.microserviceThree.service;

import com.microserviceThree.model.Employee;
import com.microserviceThree.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Employee getEmployeeById(Long id) {
        return employeeRepository.findById(id).orElse(null);
    }

    public Employee saveEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }
}
















