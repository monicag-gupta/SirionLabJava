HelloWorldController

package com.sbpkg1;

import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@EnableAutoConfiguration
public class HelloWorldController {
	@RequestMapping("/hello")
	@ResponseBody
	public String sayHello() {
		return "Hello Spring Boot World !!!";
	}
}





@RestController is a convenience annotation that does nothing more than adds the @Controller and @ResponseBody annotations in single statement.



Here in this example the URI path is /hello.
@Controller - This is used to specify the controller.
@EnableAutoConfiguration - This enables auto configuration for the Application Context. 
@RequestMapping - This is used to map to the Spring MVC controller method. 
@ResponseBody - Used to bind the HTTP response body with a domain object in the return type. This annotation works behind the scenes. 



Save Pom.xml and wait till it downloads all resources, then close it
Right click prj -> Run as -> Mvn build.. (Set the goal : clean install ) -> Apply : close
Whenever the project is to be executed -> Run as-> MVn build at the end
Run the main application as a java application

Now open the web browser and type:
http://localhost:8080/hello








C:\Users\monica\eclipse-workspace-Sirion\demo>tree /F
│   ├───src/main/java
│   │   │   │   └───com/example/demo                 
│   │   │                   HelloWorldController.java
│   │   │                   MvcConfig.java
│   │   │                   SpringBootHelloWorldApplication.java
│   │   │                   TestController.java
│   │   ├───resources
│   │   │   │   application.properties
│   │   │   │
│   │   │   └───jsp
│   │   │           welcome.jsp
│   │   └───webapp
│   │       └───WEB-INF
│   │           └───jsp
│   │                   welcome.jsp
│   └───test/java
│           └───com/example/demo
│                           DemoApplicationTests.java
C:\Users\monica\eclipse-workspace-Sirion\demo>






spring.application.name=SBPrj1
spring.mvc.view.prefix:/WEB-INF/jsp/ 
# spring.mvc.view.prefix:classpath:/jsp/ 
spring.mvc.view.suffix:.jsp





TestController


package com.sbpkg1;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class TestController {
	//@RequestMapping("/welcome")
	//@RequestMapping("/welcome.html")
	@RequestMapping({"/welcome", "/welcome.html"})
	public ModelAndView firstPage() {
		return new ModelAndView("welcome");
	}
}





In webapp: <h1>Welcome to Spring Boot from Webapp</h1>









MvcConfig


package com.sbpkg1;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class MvcConfig implements WebMvcConfigurer {
    @Override
    public void configureViewResolvers(ViewResolverRegistry registry) {
        registry.jsp("/WEB-INF/jsp/", ".jsp");
//        registry.jsp: This method is used to configure JSP view resolver settings.
//        The first argument /WEB-INF/jsp/ specifies the prefix for JSP files. This means that all JSP files will be looked for under the /WEB-INF/jsp/ directory.
//        The second argument .jsp specifies the suffix for JSP files. This means that the view name will have .jsp appended to it to form the complete file name.
    }
}










