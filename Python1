import os
os.getcwd()

print("Hello World")


exec(open("./script.py").read())





#from HelloWorld22 import a
import HelloWorld22
print(HelloWorld22.a)


a



# Python code to demonstrate working of iskeyword()

# importing "keyword" for keyword operations
import keyword

# printing all keywords at once using "kwlist()"
print("The list of keywords is : ")
print(keyword.kwlist)




import py_compile
py_compile.compile('HelloWorld.py')







a=90
print(type(a))
<class 'int'>
a=90.45
print(type(a))
<class 'float'>
a='Hello'
print(type(a))
<class 'str'>
a='24'
print(type(a))
<class 'str'>
b=int(a)
b+8
32
print(type(b))
<class 'int'>

print(type(b))
<class 'int'>
c=str(b)
print(type(c))
<class 'str'>
c+9
Traceback (most recent call last):
  File "<pyshell#38>", line 1, in <module>
    c+9
TypeError: can only concatenate str (not "int") to str
c+"Hello"
'24Hello'



Create a constant.py:
PI = 3.14
GRAVITY = 9.8




import constant

print(constant.PI)
print(constant.GRAVITY)





x=10
y=x
x
10
y
10
x=80
y
10
x=[1,2,3]
y=x
x.append(4)
x
[1, 2, 3, 4]
y
[1, 2, 3, 4]




4+2
6
4-2
2
4*2
8
5/2
2.5
5//2
2
2**3
8
5%2
1




i=10
j=20.4
k="Hello World"
print("Int : %d \nFloat : %f  \nString : %s" % (i,j,k))
Int : 10 
Float : 20.400000  
String : Hello World




print("Hello");print("World")
Hello
World
print("Hello", end=" ");print("World")
Hello World






i=10
j=20.4
k="Hello World"
print("Int : %d \nFloat : %f  \nString : %s" % (i,j,k))
Int : 10 
Float : 20.400000  
String : Hello World
print("Hello")
Hello
print("Hello");print("World")
Hello
World
print("Hello", end=" ");print("World")
Hello World
"Hello" + "World"
'HelloWorld'
"Hello" * 10
'HelloHelloHelloHelloHelloHelloHelloHelloHelloHello'
x="Hello World"
len(x)
11
x[0]
'H'
x[-2]
'l'
x[0:-3]
'Hello Wo'
x[:4]
'Hell'
x[6:]
'World'
x[3:5]
'lo'
x.lower()
'hello world'
x.upper()
'HELLO WORLD'
x.proper()
Traceback (most recent call last):
  File "<pyshell#19>", line 1, in <module>
    x.proper()
AttributeError: 'str' object has no attribute 'proper'
x.title()
'Hello World'
x(0).upper()+x[1:].lower()
Traceback (most recent call last):
  File "<pyshell#21>", line 1, in <module>
    x(0).upper()+x[1:].lower()
TypeError: 'str' object is not callable
x[0].upper()+x[1:].lower()
'Hello world'
len(x)
11
"bat" < "cat"
True
"bat" == "cat"
False
"catalina" < "cat"
False
x
'Hello World'
"o" in x
True
"O" in x
False
y="""line1 data
is continued in line 2
and line 3"""
z="Hello
SyntaxError: unterminated string literal (detected at line 1)
y
'line1 data\nis continued in line 2\nand line 3'
print(y)
line1 data
is continued in line 2
and line 3
x
'Hello World'
x.replace("World","Python Coders")
'Hello Python Coders'
x
'Hello World'
y = x.replace("World","Python Coders")
y
'Hello Python Coders'
x="24"
x.isDigit()
Traceback (most recent call last):
  File "<pyshell#42>", line 1, in <module>
    x.isDigit()
AttributeError: 'str' object has no attribute 'isDigit'. Did you mean: 'isdigit'?
x.isdigit()
True
x="24.56"
x.isdigit()
False
ord("A")
65
chr(65)
'A'








from math import *
abs(-90)
90
min(8,7,4,9)
4
sqrt(9)
3.0
ceil(8.9)
9
floor(8.9)
8











x=10
def fn():
    print(x)

fn()
10
def fn():
    x=20
    print(x)

    
fn()
20
x
10
def fn():
    global x
    x=20
    print(x)

    
fn()
20
x
20







Exercise: Write a Python program that prompts the user for his/her amount of money, then reports how many Courses the person can afford, and how much more money he/she will need to afford an additional Course.
Import a python file which contains:
Java=50000
JEE=20000
Spring=40000
SpringBoot=60000
Python=2000

O/p:
What is the amount in your pocket: 100000
You can afford: Java, JEE, Python
For Spring You need 10000 more
For Spring and SpringBoot you need â€¦






import sys
print( "hello, world!")
print (sys.argv[0])
print (sys.argv[1])
print (sys.argv[2])









import sys
# Getting size using getsizeof() method 
a = sys.getsizeof(12)
print("sys.getsizeof(12):", a)
b = sys.getsizeof('John')
print("sys.getsizeof('John'):", b)
b = sys.getsizeof('J')
print("sys.getsizeof('J'):", b)
b = sys.getsizeof('')
print("sys.getsizeof(''):", b)
c = sys.getsizeof(('J', 'O', 'H', 'N', 'S'))
print("sys.getsizeof(('J', 'O', 'H', 'N', 'S')):", c)
c = sys.getsizeof(())
print("sys.getsizeof(()):", c)
d = sys.getsizeof(['J', 'O', 'H', 'N', 'S'])
print("sys.getsizeof(['J', 'O', 'H', 'N', 'S']):", d)
d = sys.getsizeof([])
print("sys.getsizeof([]):", d)
e = sys.getsizeof({1, 2, 3, 4})
print("sys.getsizeof({1, 2, 3, 4}):", e)
e = sys.getsizeof({})
print("sys.getsizeof({}):", e)
f = sys.getsizeof({1: 'a', 2: 'b', 3: 'c', 4: 'd'})
print("sys.getsizeof({1: 'a', 2: 'b', 3: 'c', 4: 'd'}):", f)




sys.getsizeof(12): 28
sys.getsizeof('John'): 53
sys.getsizeof('J'): 50
sys.getsizeof(''): 49
sys.getsizeof(('J', 'O', 'H', 'N', 'S')): 80
sys.getsizeof(()): 40
sys.getsizeof(['J', 'O', 'H', 'N', 'S']): 104
sys.getsizeof([]): 56
sys.getsizeof({1, 2, 3, 4}): 216
sys.getsizeof({}): 64
sys.getsizeof({1: 'a', 2: 'b', 3: 'c', 4: 'd'}): 232







mylist=[1,2,3,4]
li2=[8,4,3]
mylist.append(5)
mylist
[1, 2, 3, 4, 5]
mylist.append(li2)
mylist
[1, 2, 3, 4, 5, [8, 4, 3]]
mylist[0]
1
mylist[5]
[8, 4, 3]
mylist[5][1]
4
len(mylist)
6
mylist[1:3]
[2, 3]



mylist=[5,2,8,"Hi","Python","Java",9]
mylist.pop()
9
mylist
[5, 2, 8, 'Hi', 'Python', 'Java']
mylist.reverse()
mylist
['Java', 'Python', 'Hi', 8, 2, 5]
mylist.sort()
Traceback (most recent call last):
  File "<pyshell#22>", line 1, in <module>
    mylist.sort()
TypeError: '<' not supported between instances of 'int' and 'str'
mylist.insert(2,89)
mylist
['Hi', 'Java', 89, 'Python', 8, 2, 5]
mylist[0]=23
mylist[1]=9
mylist[3]=34
mylist.sort()
mylist
[2, 5, 8, 9, 23, 34, 89]









# importing "copy" for copy operations
import copy
li1 = [1, 2, [3,5], 4] # initializing list 1
# using deepcopy to deep copy
li2 = copy.deepcopy(li1)
# original elements of list
print ("The original elements before deep copying")
for i in range(0,len(li1)):
	print (li1[i],end=" ")
print("\r")
li2[2][0] = 7  # adding and element to new list
# Change is reflected in l2
print ("The new list of elements after deep copying ")
for i in range(0,len( li1)):
	print (li2[i],end=" ")
print("\r")
# Change is NOT reflected in original list as it is a deep copy
print ("The original elements after deep copying")
for i in range(0,len( li1)):
	print (li1[i],end=" ")








# Python code to demonstrate the working of zip()
# initializing lists
name = [ "John", "Doe", "Jane", "Smith" ]
roll_no = [ 4, 1, 3, 2 ]
marks = [ 40, 50, 60, 70 ]
# using zip() to map values
mapped = zip(name, roll_no, marks)
# converting values to print as set
mapped = set(mapped)
# printing resultant values
print ("The zipped result is : ",end=" ")
print (mapped)










# Python code to demonstrate the working of  unzip
name = [ "Manjeet", "Nikhil", "Shambhavi", "Astha" ]      # initializing lists
roll_no = [ 4, 1, 3, 2 ]
marks = [ 40, 50, 60, 70 ]
# using zip() to map values
mapped = zip(name, roll_no, marks)
# converting values to print as list
mapped = list(mapped)
# printing resultant values
print ("The zipped result is : ",end="")
print (mapped)
print("\n")
# unzipping values
namz, roll_noz, marksz = zip(*mapped)
print ("The unzipped result: \n",end="")
# printing initial lists
print ("The name list is : ",end="")
print (namz)
print ("The roll_no list is : ",end="")
print (roll_noz)
print ("The marks list is : ",end="")
print (marksz)







# Python program to demonstrate Creation of Array
# importing "array" for array creations
import array as arr
# creating an array with integer type
a = arr.array('i', [1, 2, 3])
# printing original array
print ("The new created array is : ", end =" ")
for i in range (0, 3):
	print (a[i], end =" ")
print()
# creating an array with float type
b = arr.array('d', [2.5, 3.2, 3.3])
# printing original array
print ("The new created array is : ", end =" ")
for i in range (0, 3):
	print (b[i], end =" ")










