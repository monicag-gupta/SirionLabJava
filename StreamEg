package day6;
class A{
	String str;
	A(String str){this.str=str;}
	public B fnA() {
		str = str + " forwarded from A";
		return new B(str);
	}
}
class B{
	String str;
	B(String str){this.str=str;}
	public C fnB() {
		str = str + " forwarded from B";
		return new C(str);
	}
}
class C{
	String str;
	C(String str){this.str=str;}
	public D fnC() {
		str = str + " forwarded from C";
		return new D(str);
	}
}
class D{
	String str;
	D(String str){this.str=str;}
	public void fnD() {
		str = str + " terminated At D";
		System.out.println(str);
	}
}

public class MethodChainingEg {

	public static void main(String[] args) {
//		B b= new A("Hello ").fnA();
//		C c= b.fnB();
//		D d = c.fnC();
//		d.fnD();
		new A("Hello ").fnA().fnB().fnC().fnD();

	}

}







package day6;
import java.util.*;
interface myConsumer{
	void accept(String t);
}

public class ForEachEg {
//	public static String s;
//	static void printEach(myConsumer c) {
//		c.accept(s);
//	}
	public static void main(String[] args) {
		List<String> names = Arrays.asList("John","Jane","Smith","Peter");
//		myConsumer c = System.out :: println;
//		for(String ss :  names) {
//			s=ss;
//			printEach(c);
//		}
		
//		names.forEach(System.out::println);
		names.forEach((s)->System.out.println(s));

	}

}









package day6;
import java.util.*;
import java.util.stream.Collectors;
public class StreamEg {
	public static void main(String[] args) {
		List<String> names = Arrays.asList("Johnnny Johhny","Jane","Smith","Peter","Jack");
//		names.stream()
//		.peek(s->System.out.print(", "))
//		.peek(System.out::print)
//		.filter(s->s.startsWith("J"))
//		.peek(s->System.out.print("; Filtered:  "))
//		.forEach(System.out::print);
		
//		names.stream()
//		.peek(s->System.out.print(s + " has length: "))
//		.map(String::length)
//		.forEach(System.out::println);
		
		List<Integer> namesLen = names.stream().map(String::length).collect(Collectors.toList());
		System.out.println(namesLen);
		
		


	}

}












