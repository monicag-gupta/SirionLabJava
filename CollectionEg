import java.util.*;  
class JavaExample{  
   public static void main(String args[]){  
      ArrayList<String> alist=new ArrayList<String>();  
      alist.add("Steve");
      alist.add("Tim");
      alist.add("Lucy");
      alist.add("Pat");
      alist.add("Tom");
       //displaying elements
      System.out.println(alist);
      //Adding "Steve" at the fourth position
      alist.add(3, "Steve");
      //displaying elements
      System.out.println(alist);
   }  
}





package day5;

import java.util.*;
class CollEg1 {
	public static void main(String args[]) {
		ArrayList<String> alist = new ArrayList<String>();
		alist.add("Steve");
		alist.add("Tim");
		alist.add("Lucy");
		alist.add("Pat");
		alist.add("Angela");
		alist.add("Tom");
		System.out.println("The List: \n" + alist);
		// Removing "Steve" and "Angela"
		System.out.println("Removing Steve from position: " + alist.indexOf("Steve"));
		alist.remove("Steve");
		System.out.println("Removing Angela from position: " + alist.indexOf("Angela"));
		alist.remove("Angela");
		System.out.println("The List: \n" + alist);
		// Removing 3rd element
		System.out.println("Removing 3rd element position: " + alist.get(2));
		alist.remove(2);
		System.out.println("The List: \n" + alist);
	}
}









package day5;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class CollEg1 {
	public static void main(String[] args) {
		// Creating a LinkedList
		LinkedList<String> friends = new LinkedList<>();
		// Adding new elements to the end of the LinkedList using add() method.
		friends.add("Rajeev");
		friends.add("John");
		friends.add("David");
		friends.add("Chris");
		System.out.println("Initial LinkedList : " + friends);
		friends.add(3, "Lisa"); // Adding at the specified position in the LinkedList
		System.out.println("After add(3, \"Lisa\") : " + friends);
		friends.addFirst("Steve"); // Adding an element at the beginning of the LinkedList
		System.out.println("After addFirst(\"Steve\") : " + friends);
		friends.addLast("Jennifer"); // Add at end of the LinkedList (equivalent to the add() )
		System.out.println("After addLast(\"Jennifer\") : " + friends);
		List<String> familyFriends = new ArrayList<>();
		familyFriends.add("Jesse");
		familyFriends.add("Walt");
		friends.addAll(familyFriends);
		System.out.println("After addAll(familyFriends) : " + friends);
		friends.remove(4); //removing Lisa
        friends.removeFirst(); //remove first ele
        friends.removeLast();   //remove last ele
        System.out.println("After all the remove algorithms : " + friends);
        

	}
}










package day5;

import java.util.*;

public class CollEg1 {
	public static void main(String[] args) {
		ArrayList<String> al = new ArrayList<>();
		al.add("C");
		al.add("A");
		al.add("E");
		al.add("B");
		al.add("D");
		System.out.print("Original contents of al: ");
		Iterator<String> itr = al.iterator();
		while (itr.hasNext()) {
			Object element = itr.next();
			System.out.print(element + " ");
		}
		System.out.println();
		ListIterator<String> litr = al.listIterator();
		while (litr.hasNext()) {
			Object element = litr.next();
			litr.set(element + "+");
		}
		System.out.print("Modified contents of al: ");
		itr = al.iterator();
		while (itr.hasNext()) {
			Object element = itr.next();
			System.out.print(element + " ");
		}
		System.out.println();
		System.out.print("Modified list backwards: ");
		while (litr.hasPrevious()) { // Now, display the list backwards
			Object element = litr.previous();
			System.out.print(element + " ");
		}
		System.out.println();
	}
}









package day5;

import java.util.*;

public class CollEg1 {
	public static void main(String[] args) {
		Vector<String> vct = new Vector<String>();
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		System.out.println(vct);
		vct.add(2, "Random"); // adding element at specified index
		System.out.println(vct);
		System.out.println("Element at index 3 is: " + vct.get(3)); // getting ele by index
		System.out.println("The first element of this vector is: " + vct.firstElement());
		System.out.println("The last element of this vector is: " + vct.lastElement());
		System.out.println("Is this vector empty? " + vct.isEmpty());
		System.out.println("Size Of Vector " + vct.size());
		System.out.println("Max Size Of Vector " + vct.capacity());
		vct.add("First2");
		vct.add("Second2");
		vct.add("Third2");
		vct.add("First3");
		vct.add("Second3");
		vct.add("Third4");
		vct.add("First5");
		System.out.println("Size Of Vector " + vct.size());
		System.out.println("Max Size Of Vector " + vct.capacity());
		System.out.println(vct);
	}
}










package day5;

import java.util.*;

public class CollEg1 {
	public static void main(String[] args) {
		Queue<String> qe = new LinkedList<String>();
		qe.add("b");
		qe.add("a");
		qe.add("c");
		qe.add("e");
		qe.add("d");
		Iterator<String> it = qe.iterator();
		System.out.println("Initial Size of Queue :" + qe.size());
		while (it.hasNext()) {
			//String iteratorValue = (String) it.next();
			System.out.println("Queue Next Value :" + it.next());
		}
		System.out.println("Queue peek :" + qe.peek()); // get value and does not remove element from queue
		System.out.println("Queue poll :" + qe.poll()); // get first value and remove that object from queue
		System.out.println("Final Size of Queue :" + qe.size());
		System.out.println("The Queue is:\n" + qe);

	}

}








package day5;

import java.util.*;

public class CollEg1 {
	public static void main(String[] args) {
		// Creating a Stack
        Stack<String> stackOfCards = new Stack<>();
        // Pushing new items to the Stack
        stackOfCards.push("Jack");
        stackOfCards.push("Queen");
        stackOfCards.push("King");
        stackOfCards.push("Ace");
        System.out.println("Stack => " + stackOfCards);
        System.out.println();
        // Popping items from the Stack
        String cardAtTop = stackOfCards.pop();  //Throws EmptyStackException if the stack is empty
        System.out.println("Stack.pop() => " + cardAtTop);
        System.out.println("Current Stack => " + stackOfCards);
        System.out.println();
        // Get the item at the top of the stack without removing it
        cardAtTop = stackOfCards.peek();
        System.out.println("Stack.peek() => " + cardAtTop);
        System.out.println("Current Stack => " + stackOfCards);
    }
}










package day5;

import java.util.*;

public class CollEg1 {
	public static void main(String[] args) {
		int count[] = { 34, 22, 10, 60, 30, 22, 10};
		System.out.print("The array: ");
		for (int i : count)
			System.out.print(i + ", ");
		System.out.println();
		Set<Integer> set = new HashSet<Integer>();
		for (int i = 0; i < count.length; i++) {
			set.add(count[i]);
		}
		Set<Integer> setLL = new LinkedHashSet<Integer>();
		for (int i = 0; i < count.length; i++) {
			setLL.add(count[i]);
		}
		System.out.println("The Set: \n" + set);
		System.out.println("The Input wise Ordered Set: \n" + setLL);
		TreeSet<Integer> sortedSet = new TreeSet<Integer>(set);
		System.out.println("The sorted list is:");
		System.out.println(sortedSet);
		System.out.println("The First element of the set is: " + (Integer) sortedSet.first());
		System.out.println("The last element of the set is: " + (Integer) sortedSet.last());
	}
}











package day5;

import java.util.*;

public class CollEg1 {
	public static void main(String[] args) {
        Map<String, String> fruit = new TreeMap<String, String>();
        //Map<String, String> fruit = new HashMap<String, String>();
      //Map<String, String> fruit = new LinkedHashMap<String, String>();
        fruit.put("Apple", "red");
        fruit.put("Pear", "yellow");
        fruit.put("Plum", "red");
        fruit.put("Cherry", "red");
        fruit.put("Cherry", "deepred");
        System.out.println("Key Set: " + fruit.keySet());
        System.out.println("Value Collection: " + fruit.values());
        System.out.println("Each Entry Set: " + fruit.entrySet());
        System.out.println("\nThe Fruits are: ");
        for (String key : fruit.keySet()) {
        	System.out.println(key + ": " + fruit.get(key));
        }
	}
}









package day5;

import java.util.*;

public class CollEg1 {
	public static void main(String[] args) {
		Deque<String> deque=new ArrayDeque<String>();  
	    deque.offer("arvind");  
	    deque.offer("vimal");  
	    deque.add("mukul");  
	    deque.offerFirst("jai");  
	    System.out.println("After offerFirst Traversal...");  
	    for(String s:deque){  
	        System.out.println(s);  
	    }  
	    //deque.poll();  
	    //deque.pollFirst();//it is same as poll()  
	    deque.pollLast();  
	    System.out.println("After pollLast() Traversal...");  
	    for(String s:deque){  
	        System.out.println(s);  
	    }  
	}  
	} 






























package day5;

import java.util.*;

public class CollEg1 {
	public static void main(String[] args) {
		int[] a= {12,56,23,1,8,34,90};
		PriorityQueue<Integer> p = new PriorityQueue<>();
		for(int i : a)
			p.add(i);
		System.out.println("The priority queue is always sorted in ascending order of Priorities:");
		System.out.println(p);
	}
}
































