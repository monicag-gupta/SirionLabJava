Here, we are going to learn the simple steps to create the first spring application. To run this application, we do not need any IDE. Steps:
Create a package : com.springcore
create the class : HelloWorld.java
create the test class : MainApp.java
create the xml file directly in src folder to provide the values : Beans.xml
Load the spring jar files : Core, Beans, Context, Logging
Run the test class





package com.springcore;

public class HelloWorld {
	private String message; // property

	public void setMessage(String message) {
		this.message = message;
	}

	public void getMessage() {
		System.out.println("Your Message : " + message);
	}
}










package com.springcore;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp {
	public static void main(String[] args) {
		ApplicationContext context = (ApplicationContext) new ClassPathXmlApplicationContext("Beans.xml");
		HelloWorld obj = (HelloWorld) context.getBean("idhello");
		obj.getMessage();
	}
}





<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
 		<bean id="idhello" class="com.springcore.HelloWorld">
 			<property name="message" value="Hello World!"/>
 		</bean>
</beans>









@Component :       
It is generic  stereotype for any spring managed component.
@Repository :
Specialized form of @Component. This annotation work as marker for any class which fulfills the role of repository or Data Access  Object(Persistent Layer).
@Controller :
Specialized form of @Component and applied to Presentation Layer.
@Service :
Specialized form of @Component and applied to Service Layer.
@Configuration :
@Configuration annotated class is used to define beans.  Have methods with annotation @Bean
@Bean
It is a method level annotation which work with @Configuration
@Scope
Every bean defined in IoC container needs to have a scope, default scope is Singleton.
@DependsOn
@Primary
@Lazy
@Import
@ImportResource
@Value







create the class file to provide the annotation : MyAppConfiguration.java

package com.springcore;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyAppConfiguration {
	@Bean(name = "idhello")
	public HelloWorld getHelloWorld() {
		HelloWorld h=new HelloWorld();
		h.setMessage("Hello World!!!!");
		return h;
	}
}









package com.springcore;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MainApp {
	public static void main(String[] args) {
		ApplicationContext context = (ApplicationContext) new AnnotationConfigApplicationContext(MyAppConfiguration.class);
		HelloWorld obj = (HelloWorld) context.getBean("idhello");
		obj.getMessage();
	}
}










package com.springcore;
import org.springframework.stereotype.Component;

@Component("idhello")
//@Component
public class HelloWorld {
	private String message; // property

	public void setMessage(String message) {
		this.message = message;
	}

	public void getMessage() {
		System.out.println("Your Message : " + message);
	}
}







package com.springcore;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MainApp {
	public static void main(String[] args) {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
		context.scan("com.springcore");
		context.refresh();

		HelloWorld obj = (HelloWorld) context.getBean("idhello");
		obj.setMessage("Hello");
		obj.getMessage();
	}
}






<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>HelloSprMvn1Gr</groupId>
	<artifactId>HelloSprMvn1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>HelloSprMvn1</name>
	<description>First Spring Maven Prj</description>
	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
	</dependencies>
	<properties>
		<spring.version>5.0.1.RELEASE</spring.version>
		<java.version>16</java.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

	</properties>

</project>



