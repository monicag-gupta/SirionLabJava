EmployeeClass.py


class Employee:
   'Common base class for all employees'
   empCount = 0

   def __init__(self, name, salary):
      self.name = name
      self.salary = salary
      Employee.empCount += 1
   
   def displayCount(self):
     print ("Total Employee %d" % Employee.empCount)

   def displayEmployee(self):
      print ("Name : ", self.name,  ", Salary: ", self.salary)

"This would create first object of Employee class"
emp1 = Employee("Jarom", 10000)
"This would create second object of Employee class"
emp2 = Employee("Monica", 5000)
emp1.displayEmployee()
emp2.displayEmployee()
print ("Total Employee %d" % Employee.empCount)






class Student:  
    def __init__(self, name, id, age):  
        self.name = name  
        self.id = id  
        self.age = age  
     
# creates the object of the class Student  
s = Student("John", 101, 22)  

# prints the attribute name of the object s  
print(getattr(s, 'name'))  
  
# reset the value of attribute age to 23  
setattr(s, "age", 23)  
  
# prints the modified value of age  
print(getattr(s, 'age'))  
  
# prints true if the student contains the attribute with name id  
  
print(hasattr(s, 'id'))  
# deletes the attribute age  
delattr(s, 'age')  
  
# this will give an error since the attribute age has been deleted  
# this will give an error since the attribute age has been deleted  
# print(s.age)
print(hasattr(s, 'age'))  













class Student:
    "This is a student class" # This is not a doc comment
    def __init__(self, name, id, age):  
        self.name = name  
        self.id = id  
        self.age = age
    def display(self):
        print("ID : " , self.id, "Name: ", self.name, "Age : ",self.age)
        
     
# creates the object of the class Student  
s = Student("John", 101, 22)
s.display()

# prints the attribute name of the object s  
print(getattr(s, 'name'))  
  
# reset the value of attribute age to 23  
setattr(s, "age", 23)  
  
# prints the modified value of age  
print(getattr(s, 'age'))  
  
# prints true if the student contains the attribute with name id  
  
print(hasattr(s, 'id'))  
# deletes the attribute age  
delattr(s, 'age')  
  
# this will give an error since the attribute age has been deleted  
# print(s.age)
print(hasattr(s, 'age'))
s.display()








from EmployeeClass import Employee

print ("Employee.__doc__:", Employee.__doc__)
# Employee.__doc__: Common base class for all employees

print ("Employee.__name__:", Employee.__name__)
# Employee.__name__: Employee

print ("Employee.__module__:", Employee.__module__)
# Employee.__module__: EmployeeClass

print ("Employee.__bases__:", Employee.__bases__)
# Employee.__bases__: (<class 'object'>,)

print ("Employee.__dict__:", Employee.__dict__)
# Employee.__dict__: {'__module__': 'EmployeeClass', '__doc__': 'Common base class for all employees', 'empCount': 2, '__init__': <function Employee.__init__ at 0x02E3ADF0>, 'displayCount': <function Employee.displayCount at 0x02E3ADA8>, 'displayEmployee': <function Employee.displayEmployee at 0x02E3AD60>, '__dict__': <attribute '__dict__' of 'Employee' objects>, '__weakref__': <attribute '__weakref__' of 'Employee' objects>}






class Point:
   def __init__( self, x=0, y=0):
      self.x = x
      self.y = y
   def __del__(self):
      class_name = self.__class__.__name__
      print (class_name, "destroyed")

pt1 = Point()
pt2=pt1
print ("id(pt1):",id(pt1)) # prints the ids of the objects
print ("id(pt2)", id(pt2)) # prints the ids of the objects
del pt1
print("pt1 destroyed, but pt2 with same id lives")
del pt2






class Animal:  
    def speak(self):  
        print("Animal Speaking")  

#child class Dog inherits the base class Animal  

class Dog(Animal):  
    def bark(self):  
        print("dog barking")  


d = Dog()  
d.bark()  
d.speak()  

Output:
dog barking
Animal Speaking




class Employee:
    def stName(self,name):
        self.name=name
    def disp(self):  
        print("Employee: ", self.name)  

class Sal_Emp(Employee):
    def stNameSal(self, name,sal):
        self.sal=sal
        Employee.stName(Employee,name)
    def prnt(self):  
        print("Salaried Employee: ", self.name, self.sal)  

e=Sal_Emp()
e.stNameSal("Jarom",102)
e.disp() # using disp() from parent class
e.prnt()
print(e.name, e.sal)








class Animal:  
    def speak(self):  
        print("Animal Speaking")  
#The child class Dog inherits the base class Animal  
class Dog(Animal):  
    def bark(self):  
        print("dog barking")  
#The child class Dogchild inherits another child class Dog  
class DogChild(Dog):  
    def eat(self):  
        print("Eating bread...")  

d = DogChild()  
d.bark()  
d.speak()  
d.eat() 

Output:
dog barking
Animal Speaking
Eating bread...






class Calculation1:  
    def Summation(self,a,b):  
        return a+b;  
class Calculation2:  
    def Multiplication(self,a,b):  
        return a*b;  
class Derived(Calculation1,Calculation2):  
    def Divide(self,a,b):  
        return a/b;  

d = Derived()  
print(d.Summation(10,20))  
print(d.Multiplication(10,20))  
print(d.Divide(10,20))  

Output:
30
200
0.5





The issubclass(sub, sup) method is used to check the relationships between the specified classes. It returns true if the first class is the subclass of the second class, and false otherwise. 
Example:

class Calculation1:  
    def Summation(self,a,b):  
        return a+b;  
class Calculation2:  
    def Multiplication(self,a,b):  
        return a*b;  
class Derived(Calculation1,Calculation2):  
    def Divide(self,a,b):  
        return a/b;  

d = Derived()  
print(issubclass(Derived,Calculation2))  
print(issubclass(Calculation1,Calculation2))  

Output:
True
False



The isinstance() method is used to check the relationship between the objects and classes. It returns true if the first parameter, i.e., obj is the instance of the second parameter, i.e., class.

Example:

class Calculation1:  
    def Summation(self,a,b):  
        return a+b;  
class Calculation2:  
    def Multiplication(self,a,b):  
        return a*b;  
class Derived(Calculation1,Calculation2):  
    def Divide(self,a,b):  
        return a/b;  
d = Derived()  
print(isinstance(d,Derived)) 
print(isinstance(d,Calculation1)) 

Output:
True
True



We can provide some specific implementation of the parent class method in our child class. When the parent class method is defined in the child class with some specific implementation, then the concept is called method overriding. We may need to perform method overriding in the scenario where the different definition of a parent class method is needed in the child class.

Example:

class Animal:  
    def speak(self):  
        print("speaking")  
class Dog(Animal):  
    def speak(self):  
        print("Barking")  
d = Dog()  
d.speak()  
d=Animal()
d.speak()

Output:
Barking
speaking

























