Few points to help us out optimize our build time as well as some pitfalls that might impact its speed:
Using profiles wisely – how profiles impact performance
Reconsidering @MockBean – how mocking hits performance
Refactoring @MockBean – alternatives to improve performance
Thinking carefully about @DirtiesContext – a useful but dangerous annotation and how not to use it
Using test slices – a cool tool that can help or get on our way
Using class inheritance – a way to organize tests in a safe manner
State management – good practices to avoid flakey tests
Refactoring into unit tests – the best way to get a solid and snappy build







Create a Maven Project: SpringBootTestPrj
Edit pom.xml
Create SpringBootHelloWorldApplication.java in package com.SpringBootTestPrj
Create the model class as Employee.java in package com.SpringBootTestPrj.model
Create the Controller class as TestController.java in com.SpringBootTestPrj.controllers
Code, Run and Check the Output
Create the Test class in src/test/java as SpringBootHelloWorldTests.java in com.SpringBootTestPrj.test
Next extend the SpringBootHelloWorldTests.java and write the test case for the TestController as: TestWebApp.java
Run this TestWebApp class as a JUnit test case.





Pom.xml:

<properties>
		<java.version>17</java.version>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>







package com.SpringBootTestPrj.model;

public class Employee {
	private String empId;
	private String name;
	private String designation;
	private double salary;

	public Employee() {
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}

	public String getEmpId() {
		return empId;
	}

	public void setEmpId(String empId) {
		this.empId = empId;
	}
}







package com.SpringBootTestPrj.controllers;

import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.SpringBootTestPrj.model.Employee;
@RestController
@EnableAutoConfiguration
public class TestController {
	@RequestMapping(value = "/employee", method = RequestMethod.GET)
	public Employee firstPage() {
		Employee emp = new Employee();
		emp.setName("emp1");
		emp.setDesignation("manager");
		emp.setEmpId("1");
		emp.setSalary(3000);
		return emp;
	}
}










package com.SpringBootTestPrj;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
@RunWith(SpringRunner.class)
@SpringBootTest
public class SpringBootTestPrjApplicationTests {
	@Test
	public void contextLoads() {
	}

}







package com.SpringBootTestPrj.test;

import com.SpringBootTestPrj.*;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

public class TestWebApp extends SpringBootTestPrjApplicationTests {

	@Autowired
	private WebApplicationContext webApplicationContext;

	private MockMvc mockMvc;

	@Before
	public void setup() {
		mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
	}

	@Test
	public void testEmployee() throws Exception {
		mockMvc.perform(get("/employee")).andExpect(status().isOk())
				.andExpect(content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.name").value("emp1")).andExpect(jsonPath("$.designation").value("manager"))
				.andExpect(jsonPath("$.empId").value("2")).andExpect(jsonPath("$.salary").value(3000));

	}

}























