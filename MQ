https://pulsar.apache.org/docs/2.10.x/getting-started-standalone/
https://pulsar.apache.org/download/



We can start Pulsar locally using the Pulsar binaries:
Extract the tar folder downloaded 
Open Terminal at the bin folder of the downloaded tar folder
Run in terminal:
$ sudo vi ~/.bash_profile
$ sudo vi ./.profile
ecs + :q!
vi /etc/profile


esc :wq





export JAVA_HOME=/usr/java/jdk1.5.0_07    ?????
export PATH=$PATH:/usr/java/jdk1.5.0_07/bin       ????


set CLASSPATH=/usr/java/jdk1.5.0_07/lib;    ??


echo $JAVA_Home
echo $PATH
echo $CLASSPATH



set CLASSPATH=/usr/java/jdk1.5.0_07/lib;              ????








$ sudo chmod 777 pulsar
$ sudo ./pulsar standalone


This command starts Pulsar in standalone mode, which includes the Pulsar broker, BookKeeper, and ZooKeeper all in a single process. 
It will output logs to the console.
You should see messages indicating that Pulsar is starting up. 
Once it's running, you can access it at 
pulsar://localhost:6650.






Project: SBPulsarPrj

Dependencies: 
Spring Web
Spring Pulsar

Classes:
PulsarConfig
PulsarConsumer
PulsarController
PulsarProducer



Add in the POM.xml: 

        <dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.2</version>
		</dependency> 








spring.application.name=SBPulsarPrj
pulsar.topic=my-topic
spring.pulsar.client.service-url=pulsar://localhost:6650




package com.SBPulsarPrj;


import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.Producer;
import org.apache.pulsar.client.api.Schema;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class PulsarConfig {

    @Value("${spring.pulsar.client.service-url}")
    private String serviceUrl;

    @Bean
    public PulsarClient pulsarClient() throws Exception {
        return PulsarClient.builder()
                .serviceUrl(serviceUrl)
                .build();
    }

    @Bean
    public Producer<User> userProducer(PulsarClient pulsarClient) throws Exception {
        return pulsarClient.newProducer(Schema.JSON(User.class))
                .topic("my-topic")
                .create();
    }

    public static class User {
        private String name;
        private int age;
        // getters and setters
    }
}











package com.SBPulsarPrj;


import org.apache.pulsar.client.api.Consumer;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.PulsarClientException;
import org.apache.pulsar.client.api.SubscriptionType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import jakarta.annotation.PostConstruct;

@Component
public class PulsarConsumer {

	@Value("${spring.pulsar.client.service-url}")
//	@Autowired
	private String serviceUrl;

    @Value("${pulsar.topic}")
    private String topic;

    @PostConstruct
    public void init() throws PulsarClientException {
        PulsarClient client = PulsarClient.builder()
                .serviceUrl(serviceUrl)
                .build();

        Consumer<byte[]> consumer = client.newConsumer()
                .topic(topic)
                .subscriptionName("my-subscription")
                .subscriptionType(SubscriptionType.Exclusive)
                .subscribe();

        while (true) {
            try {
                Message<byte[]> msg = consumer.receive();
                System.out.printf("Message received: %s%n", new String(msg.getData()));
                consumer.acknowledge(msg);
            } catch (PulsarClientException e) {
                e.printStackTrace();
            }
        }
    }
}








package com.SBPulsarPrj;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PulsarController {

    @Autowired
    private PulsarProducer pulsarProducer;

@Autowired
PulsarConsumer pulsarConsumer;

    @PostMapping("/send")
    public String sendMessage(@RequestParam String message) {
        pulsarProducer.sendMessage(message);
        return "Message sent: " + message;
    }

 @GetMapping("/receive")
    public String receiveMessage() {
        return "Message received";
    }
}








package com.SBPulsarPrj;

import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.Producer;
import org.apache.pulsar.client.api.PulsarClientException;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import jakarta.annotation.PostConstruct;

@Component
public class PulsarProducer {

    @Value("${spring.pulsar.client.service-url}")
    private String serviceUrl;

    @Value("${pulsar.topic}")
    private String topic;

    private Producer<byte[]> producer;

    @PostConstruct
    public void init() throws PulsarClientException {
        PulsarClient client = PulsarClient.builder()
                .serviceUrl(serviceUrl)
                .build();

        producer = client.newProducer()
                .topic(topic)
                .create();
    }

    public void sendMessage(String message) {
        try {
            producer.send(message.getBytes());
        } catch (PulsarClientException e) {
            e.printStackTrace();
        }
    }
}





Test the API:
Send a message:
Use a tool like Postman to send a POST request to 
http://localhost:8080/send
with a message parameter in the form data in body.
Receive a message:
Send a GET request to 
http://localhost:8080/receive
Verify Pulsar Setup
Ensure Apache Pulsar is running locally and configured correctly. 
The Pulsar service URL (pulsar://localhost:6650) should match your Pulsar instance configuration.








