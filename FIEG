package day5;
class Kalaripayettu{
	public String toString() { return "Kalaripayettu";}	
}
interface KingIndraverma{
	Kalaripayettu chotabheem();  //SAM: Single Abstract Method
}
public class FIEg {
	public static void main(String[] args) {
		KingIndraverma heyIndraverma=new KingIndraverma() {
			public Kalaripayettu chotabheem() {return new Kalaripayettu();}
		};
		System.out.println(heyIndraverma.chotabheem());
		
		KingIndraverma OyeIndraverma= () -> new Kalaripayettu();
		System.out.println(OyeIndraverma.chotabheem());
	}

}









package day5;

interface myPredicate<T>
{
	Boolean test(T t); 
}

public class FIEg {
	public static void main(String[] args) {
		myPredicate<Integer> eligible2Vote = (Integer age) -> age >=18;
		myPredicate<Integer> eligible2SeniorCitizenship = (age) -> age >=60;
		System.out.println("Enter your age");
		int age=new java.util.Scanner(System.in).nextInt();
		System.out.println(eligible2Vote.test(age) ? "Eligible to vote" : "Not Eligible to vote");
		System.out.println("Enter your Parent's age");
		age=new java.util.Scanner(System.in).nextInt();
		System.out.println(eligible2SeniorCitizenship.test(age) ? "You get Senior previledges" : "Not Senior");
	}

}








package day5;
interface FI1{
	void fn1();
}
interface FI2{
	void fn2(int x);
}
interface FI3{
	void fn3(int x, int y);
}
interface FI4{
	int fn4();
}
interface FI5{
	int fn5(int x);
}
interface FI6{
	int fn6(int x, int y);
}
public class FIEg {
	public static void main(String[] args) {
		FI1 f11= () -> System.out.println("I am f11 obj");
		f11.fn1();
		FI1 f12= () -> {
			System.out.println("Line1: I am f12 obj");
			System.out.println("Line 2: I am f12 obj");
		};
		f12.fn1();
		
		FI2 f21 = (int x) -> System.out.println("x in f21: " + x);
		f21.fn2(10);
		FI2 f22 = (x) -> System.out.println("x in f22: " + x);
		f22.fn2(20);
		FI2 f23 = x -> System.out.println("x in f23: " + x);
		f23.fn2(30);
		
		
		FI3 f31 = (int x, int y) -> System.out.println("x in f31: " + x + " y in f31: " + y);
		f31.fn3(10,20);
		FI3 f32 = (x, y) -> System.out.println("x in f32: " + x + " y in f32: " + y);
		f32.fn3(10,20);
		
		
		
		FI4 f41 = () -> 100;
		System.out.println(f41.fn4());
		FI4 f42 = () -> {return 100;};
		System.out.println(f42.fn4());
		
		
	}

}









package day5;
interface myPredicate<T>{
	Boolean test(T t);
	public default myPredicate<T> and(myPredicate<T> o){
		myPredicate<T> myPredicateobj = (T t) -> this.test(t) && o.test(t);
		return myPredicateobj;
	}
	public default myPredicate<T> negate(){
		myPredicate<T> myPredicateobj = (T t) -> ! this.test(t) ;
		return myPredicateobj;
	}
	public default myPredicate<T> or(myPredicate<T> o){
		myPredicate<T> myPredicateobj = (T t) -> this.test(t) || o.test(t);
		return myPredicateobj;
	}
}
public class FIEg {
	public static void main(String[] args) {
		myPredicate<Integer> validEmpGr18 = (age) -> age>=18;
		myPredicate<Integer> validEmpLt60 = (age) -> age<=60;
		myPredicate<Integer> validEmp = validEmpGr18.and(validEmpLt60);
		System.out.println("Valid Emp??? " + validEmp.test(20));
	}

}
















